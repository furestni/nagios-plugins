#!/usr/bin/env python

import sys
import argparse
import requests


from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--url', required=True, help='url of the json api')
    parser.add_argument('--key', required=True, help='key to look for in json')
    parser.add_argument('--ok-value', required=True, help='ok value the key should have in json')
    parser.add_argument('--warning-value', help='warning value the key should have in json')
    parser.add_argument('--error-value', help='error value the key should have in json')
    parser.add_argument('--description', default=False, action='store_true', help='print the full json return value with the status message, default: false')
    parser.add_argument('--insecure', default=False, help='Allow connections to SSL sites without certs, default: false')
    parser.add_argument('--timeout', type=int, default=60, help='Timeouts in seconds, default: 60')
    args = parser.parse_args()

    url = args.url
    key = args.key
    ok_value = args.ok_value
    error_value = args.error_value
    warning_value = args.warning_value
    verbose = args.description
    verify = not args.insecure
    timeout = args.timeout

    description = ''
    try:
        r = requests.get(url, verify=verify, timeout=timeout)
    except Exception as e:
        print "ERROR: unexpected error while HTTP requesting %s: %s" % (url, e)
        sys.exit(2)

    if verbose:
        description = 'value: ' + r.text
    try:
        data_list = r.json()
    except ValueError as e:
        print "ERROR: unexpected response: %s" % e
        sys.exit(2)

    try:
        response_time = r.elapsed.total_seconds()
        reponse_bytes = r.headers.get('Content-Length') or 0
    except:
        response_time = 0.0
        reponse_bytes = 0

    error_found = False
    warning_found = False
    ok_found = False
    nok_found = False

    value = dictator(data_list, key)

    if value != None:
        if error_value and str(value).lower() == str(error_value).lower():
            error_found = True
        elif warning_value and str(value).lower() == str(warning_value).lower():
            warning_found = True
        elif str(value).lower() == str(ok_value).lower():
            ok_found = True
        else:
            nok_found = True

    if error_found:
        print "ERROR: Key '%s' with error-value '%s' found on %s %s | time=%ss;;;0.000000 size=%sB;;;0" % (
            key, error_value, url, description, response_time, reponse_bytes
        )
        sys.exit(2)
    elif warning_found:
        print "ERROR: Key '%s' with warning-value '%s' found on %s %s | time=%ss;;;0.000000 size=%sB;;;0" % (
            key, warning_value, url, description, response_time, reponse_bytes
        )
        sys.exit(1)
    elif ok_found:
        print "OK: Key '%s' with ok-value '%s' found on %s %s | time=%ss;;;0.000000 size=%sB;;;0" % (
            key, ok_value, url, description, response_time, reponse_bytes
        )
    elif nok_found:
        print "ERROR: Key '%s' is not ok on %s %s | time=%ss;;;0.000000 size=%sB;;;0" % (
            key, url, description, response_time, reponse_bytes
        )
        sys.exit(2)
    else:
        print "UNKNOWN: Key '%s' not found or ok_value '%s' or error_value '%s' not found on %s %s | time=%ss;;;0.000000 size=%sB;;;0" % (
            key, ok_value, error_value, url, description, response_time, reponse_bytes
        )
        sys.exit(3)

def dictator(data, path, default=None):
    value = None
    keys = path.split(".")

    # reset path
    path = None

    # if 1st key is a list index
    if all(char.isdigit() for char in keys[0]):
        path = '['+keys[0]+']'

        # remove 1st key from key list
        keys.pop(0)

    # build proper path
    for key in keys:
        # check if key is a list
        if key.endswith(']'):
            temp = key.split('[')
            key = ''.join(temp[0])
            index = int(temp[1].strip(']'))
            if path is None:
                path = "['"+key+"']"+"["+str(index)+"]"
            else:
                path = path+"['"+key+"']"+"["+str(index)+"]"
        else:
            if path is None:
                path = "['"+key+"']"

            else:
                # check if key is an index
                if key.isdigit() is True:
                    path = path + "["+key+"]"
                else:
                    path = path + "['"+key+"']"
    lookup = 'data'+path
    try:
        value = eval(lookup)
        if value is None:
            value = default
    except (KeyError, ValueError, IndexError, TypeError) as err:
        value = default
    finally:
        return value


if __name__ == "__main__":
    main()

