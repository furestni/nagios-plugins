#!/usr/bin/python

import argparse
import requests
import json
import sys

parser = argparse.ArgumentParser(description='Get Java Heap Usage of Elasticsearch Server')
parser.add_argument('-v','--version', action='version', version='%(prog)s 0.1')
parser.add_argument('-s','--server', action='store', help='fqdn server address of elasticsearch server',required=True)
parser.add_argument('-p','--port', action='store', help='listen port of elasticsearch server',default=9200,type=int)
parser.add_argument('-w','--warning', action='store', help='set the warning level',type=int,required=True)
parser.add_argument('-c','--critical', action='store', help='set the critical level',type=int,required=True)

results = parser.parse_args()

server_fqdn = results.server
server      = server_fqdn.split('.')[0]
port        = results.port
url         = "http://" + server_fqdn + ":" + str(port) + "/_nodes/stats"


try:
  response = requests.get(url)
except:
  print("UNKNOWN")
  sys.exit(3)

data = response.json()

for s in data['nodes']:

  if data['nodes'][s]['name'] == server:
    mem = data['nodes'][s]['jvm']['mem']['heap_used_in_bytes']

ret = 3
if results.warning < mem:
  ret = 1
  if results.critical < mem:
    ret = 2
else:
  ret = 0  

prefix = ['OK', 'WARNING', 'CRITICAL', 'UNKNOWN'][ret]
# 'label'=value[UOM];[warn];[crit];[min];[max]
print("{prefix} | heap_usage={mem}B;{warn};{crit};0;".format(prefix=prefix, mem=mem,warn=results.warning,crit=results.critical))

sys.exit(ret)
